chol(crossprod(A,A))
calcQ(A)
calcQ<-function(A){
U<-matrix(NA, ncol = ncol(A), nrow = nrow(A))
U[,1]<-A[,1]
for(i in 2:ncol(A)){
#print(apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1, sum))
U[,i]<-A[,i] - apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1,sum)
print(norm(U[,i], type = "2"))
}
print(U)
#print(A[,3] - proj(A[,3], A[,1]) - proj(A[,3], U[,2]))
#print(norm2(U[,3]))
normalize.cols(U)
}
A<-matrix(c(1,2,3, 4,5,6, 7,8,9, 2,4,6), nrow =4, ncol =3, byrow=T)
calcQ(A)
calcQ<-function(A){
U<-matrix(NA, ncol = ncol(A), nrow = nrow(A))
U[,1]<-A[,1]
for(i in 2:ncol(A)){
#print(apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1, sum))
U[,i]<-A[,i] - apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1,sum)
print(norm(U[,i], type = "2"))
}
print(U)
#print(A[,3] - proj(A[,3], A[,1]) - proj(A[,3], U[,2]))
print(norm2(U[,3]))
normalize.cols(U)
}
A<-matrix(c(5,3,2), nrow = 4, ncol = 2)
A<-matrix(c(1,2,3, 4,5,6, 7,8,9, 2,4,6), nrow =4, ncol =3, byrow=T)
calcQ(A)
install.packages("ppls")
library(ppls)
?normalize.vector
A<-matrix(c(1,2,3, 4,5,6, 7,8,9, 2,4,6, 1,3,5), nrow =5, ncol =3, byrow=T)
A
A<-matrix(c(5,3,2), nrow = 4, ncol = 2)
crossprod(calcQ(A), A)
calcQ<-function(A){
U<-matrix(NA, ncol = ncol(A), nrow = nrow(A))
U[,1]<-A[,1]
for(i in 2:ncol(A)){
#print(apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1, sum))
U[,i]<-A[,i] - apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1,sum)
}
print(U)
#print(A[,3] - proj(A[,3], A[,1]) - proj(A[,3], U[,2]))
#print(norm2(U[,3]))
normalize.cols(U)
}
A<-matrix(c(5,3,2), nrow = 4, ncol = 2)
calcQ(A)
crossprod(calcQ(A), A)
chol(crossprod(A,A))
A<-matrix(c(1,2,3, 4,5,6, 7,8,9, 2,4,6), nrow =4, ncol =3, byrow=T)
A
A<-matrix(c(1,3,4, 5,1,6, 7,3,1, 6,1,9), nrow =4, ncol =3, byrow=T)
calcQ(A)
crossprod(calcQ(A), A)
chol(crossprod(A,A))
calcQ<-function(A){
U<-matrix(NA, ncol = ncol(A), nrow = nrow(A))
U[,1]<-A[,1]
for(i in 2:ncol(A)){
U[,i]<-A[,i] - apply(apply(matrix(U[,1:(i-1)], nrow = nrow(A)), 2, proj,a= matrix(A[,i])),1,sum)
}
normalize.cols(U)
}
A<-matrix(c(5,3,2), nrow = 4, ncol = 2)
A<-matrix(c(1,3,4, 5,1,6, 7,3,1, 6,1,9), nrow =4, ncol =3, byrow=T)
calcQ(A)
crossprod(calcQ(A), A)
chol(crossprod(A,A))
normalize.cols<-function(A){
#calcaulates the column normalization of matrix A where elements
#U_{i,j} = A_{i,j}/L2Norm(A_{.,j})
colNorm<-apply(A, 2, norm2) #here, I calculate the norm of each column
A%*%diag(1/colNorm) #here, I divide each element by norm of its column
#sweep(A, 2, colNorm, FUN= '/')
}
crossprod(calcQ(A), A)
chol(crossprod(A,A))
A<-matrix(c(1,2,3, 4,5,6, 7,8,9, 2,4,6, 1,3,5), nrow =5, ncol =3, byrow=T)
crossprod(calcQ(A)[,c(1,2)], A)
A
calcQ(A[,c(1,2)])
crossprod(calcQ(A[,c(1,2)]),A)
A[,c(1,2)]
calcQ(A[,c(1,2)])
crossprod(calcQ(A[,c(1,2)]),A[,c(1,2)])
chol(crossprod(A[,c(1,2)], A[,c(1,2)]))
library(ggplot2)
library(gplots)
load("./Data/A.Rdata")
source("./Code/GoT/LNM.EM.R")
setwd("~/Documents/GitHub/Latent-Network-Models")
load("./Data/A.Rdata")
source("./Code/GoT/LNM.EM.R")
set.seed(1985)
em <- LNM.EM.U(A)
D <- matrix(NA, nrow = nrow(A), ncol = ncol(A))
D[upper.tri(D)] <- em$d
D[lower.tri(D)] <- t(D)[lower.tri(D)]
diag(D) <- 0
rownames(D) <- colnames(D) <- rownames(A)
G <- graph_from_adjacency_matrix(D,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2 *max(degree(G)))
layout <- layout_with_dh(G)
library(igraph)
G <- graph_from_adjacency_matrix(D,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2 *max(degree(G)))
layout <- layout_with_dh(G)
plot(G
, vertex.size = degree(G)
, vertex.label.color = "white"
, edge.width = log(E(G)$weight)
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("blue", alpha.f = .75)
, curved = 200)
P <- matrix(NA, nrow = nrow(A), ncol = ncol(A))
P[upper.tri(P)] <- exp(em$pi)
P[lower.tri(P)] <- t(P)[lower.tri(P)]
diag(P) <- 0
rownames(P) <- colnames(P) <- rownames(A)
G <- graph_from_adjacency_matrix(P,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2*max(degree(G)))
plot(G
, vertex.size = degree(G)
, edge.width = E(G)$weight
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("red", alpha.f = .75)
, curved = 200)
df <- melt(D)
pdf("./Final Report/report_figures/heatmap_dist_unweighted.pdf")
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "white", mid = "blue", midpoint = 0)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
library(reshape)
df <- melt(D)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "red", high = "white", mid = "blue", midpoint = 0)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
df <- melt(P)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Probabilities")
load("./Data/W.Rdata")
library(gridExtra)
em <- LNM.EM.W(W)
ggplot(data.frame(Distance = em$d[em$d <5]), aes(x=Distance)) +
geom_density(color="blue",
fill="lightblue",
alpha = .7)
ggplot(data.frame(Distance = em$d[em$d <5]), aes(x=Distance)) +
geom_density(color="blue",
fill="lightblue",
alpha = .7)
em
D <- matrix(NA, nrow = nrow(W), ncol = ncol(W))
D[upper.tri(D)] <- em$d
D[lower.tri(D)] <- t(D)[lower.tri(D)]
diag(D) <- 0
rownames(D) <- colnames(D) <- rownames(W)
df <- melt(D)
P <- matrix(NA, nrow = nrow(W), ncol = ncol(W))
P[upper.tri(P)] <- em$p
P[lower.tri(P)] <- t(P)[lower.tri(P)]
diag(P) <- 0
rownames(P) <- colnames(P) <- rownames(W)
df <- melt(P)
p1 <- ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
df <- melt(W - P)
p2<- ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0)
p2
grid.arrange(p1,p2, ncol = 1)
library(rgl)
spectral_clust <- function(S, d, k = 4){
sqrtD <- diag(1/sqrt(rowSums(S)))
Lsym <- diag(rep(1, nrow(S))) - tcrossprod(crossprod(sqrtD, S), sqrtD)
ES <- eigen(Lsym)
coord <- (ES$vectors[,order(ES$values)])[,2:(d+1)]
km <- kmeans(coord, k)
list(groups = km$cluster, coord = coord)
}
G <- graph_from_adjacency_matrix(P,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
sc <- spectral_clust(P, d = 3, k = 4)
plot3d(sc$coord, col = sc$groups)
library(plotly)
test<-data.frame(sc$coord)
colnames(test)<-c("oned", "twod", "threed")
p <- plot_ly(test, x = ~oned, y = ~twod, z = ~threed, color = sc$groups) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
zaxis = list(title = 'z')))
p
plot(G, vertex.color = sc$groups)
plot(G
, vertex.size = degree(G)
, vertex.label.color = "white"
, edge.width = log(E(G)$weight)
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("blue", alpha.f = .75)
, curved = 200)
plot(G
, vertex.size = degree(G)
, edge.width = E(G)$weight
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("red", alpha.f = .75)
, curved = 200)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white", midpoint = 0)+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Probabilities")
plot(G, vertex.color = sc$groups)
plot3d(sc$coord, col = sc$groups)
rm(ls = ())
rm(list=ls())
library(ggplot2)
library(gplots)
library(reshape)
library(igraph)
load("./Data/A.Rdata")
source("./Code/GoT/LNM.EM.R")
set.seed(1985)
em <- LNM.EM.U(A)
D <- matrix(NA, nrow = nrow(A), ncol = ncol(A))
D[upper.tri(D)] <- em$d
D[lower.tri(D)] <- t(D)[lower.tri(D)]
diag(D) <- 0
rownames(D) <- colnames(D) <- rownames(A)
G <- graph_from_adjacency_matrix(D,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2 *max(degree(G)))
layout <- layout_with_dh(G)
plot(G
, vertex.size = degree(G)
, vertex.label.color = "black"
, edge.width = log(E(G)$weight)
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("lightblue", alpha.f = .75)
, curved = 200)
P <- matrix(NA, nrow = nrow(A), ncol = ncol(A))
P[upper.tri(P)] <- exp(em$pi)
P[lower.tri(P)] <- t(P)[lower.tri(P)]
diag(P) <- 0
rownames(P) <- colnames(P) <- rownames(A)
G <- graph_from_adjacency_matrix(P,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2*max(degree(G)))
plot(G
, vertex.size = degree(G)
, vertex.label.color = "black"
, edge.width = E(G)$weight
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("red", alpha.f = .75)
, curved = 200)
df <- melt(D)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "white", mid = "lightblue")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
pdf("./Final Report/report_figures/heatmap_dist_unweighted.pdf")
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "white", mid = "lightblue")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
dev.off()
df
ggplot(data = df, aes(x=X1, y=X2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "white", mid = "lightblue")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
install.packages("reshape2")
library(reshape2)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "white", mid = "lightblue")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
df <- melt(D)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "white", mid = "lightblue")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
df
rm(list = ls())
library(ggplot2)
library(gplots)
library(reshape2)
library(igraph)
load("./Data/A.Rdata")
source("./Code/GoT/LNM.EM.R")
set.seed(1985)
em <- LNM.EM.U(A)
D <- matrix(NA, nrow = nrow(A), ncol = ncol(A))
D[upper.tri(D)] <- em$d
D[lower.tri(D)] <- t(D)[lower.tri(D)]
diag(D) <- 0
rownames(D) <- colnames(D) <- rownames(A)
G <- graph_from_adjacency_matrix(D,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2 *max(degree(G)))
layout <- layout_with_dh(G)
plot(G
, vertex.size = degree(G)
, vertex.label.color = "black"
, edge.width = log(E(G)$weight)
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("lightblue", alpha.f = .75)
, curved = 200)
P <- matrix(NA, nrow = nrow(A), ncol = ncol(A))
P[upper.tri(P)] <- exp(em$pi)
P[lower.tri(P)] <- t(P)[lower.tri(P)]
diag(P) <- 0
rownames(P) <- colnames(P) <- rownames(A)
G <- graph_from_adjacency_matrix(P,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
V(G)$label.cex <-  degree(G)/(2*max(degree(G)))
plot(G
, vertex.size = degree(G)
, vertex.label.color = "black"
, edge.width = E(G)$weight
, layout = layout
, color = "grey86"
, vertex.color = adjustcolor("red", alpha.f = .75)
, curved = 200)
df <- melt(D)
ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "white", mid = "lightblue")+
theme(axis.text.x = element_text(angle = 90, hjust = 1))+
labs(x = "Character Names",
y = "Character Names",
fill = "Distance")
df
load("./Data/W.Rdata")
em <- LNM.EM.W(W)
ggplot(data.frame(dist = em$d[em$d <5]), aes(x=dist)) +
geom_density(color="grey",
fill="lightblue",
alpha = .7)+
theme_minimal()+
labs(x = "Latent Distance",
y = "Density",
title = "Non-Zero Distance Distribution")
D <- matrix(NA, nrow = nrow(W), ncol = ncol(W))
D[upper.tri(D)] <- em$d
D[lower.tri(D)] <- t(D)[lower.tri(D)]
diag(D) <- 0
rownames(D) <- colnames(D) <- rownames(W)
df <- melt(D)
P <- matrix(NA, nrow = nrow(W), ncol = ncol(W))
P[upper.tri(P)] <- em$p
P[lower.tri(P)] <- t(P)[lower.tri(P)]
diag(P) <- 0
rownames(P) <- colnames(P) <- rownames(W)
df <- melt(P)
p1 <- ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
df <- melt(W - P)
p2<- ggplot(data = df, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0)
p2
grid.arrange(p1,p1, ncol = 1)
library(rgl)
spectral_clust <- function(S, d, k = 4){
sqrtD <- diag(1/sqrt(rowSums(S)))
Lsym <- diag(rep(1, nrow(S))) - tcrossprod(crossprod(sqrtD, S), sqrtD)
ES <- eigen(Lsym)
coord <- (ES$vectors[,order(ES$values)])[,2:(d+1)]
km <- kmeans(coord, k)
list(groups = km$cluster, coord = coord)
}
G <- graph_from_adjacency_matrix(P,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
sc <- spectral_clust(P, d = 3, k = 4)
plot3d(sc$coord, col = sc$groups)
plot(G, vertex.color = sc$groups)
G <- graph_from_adjacency_matrix(D,
weighted = TRUE,
mode = "undirected",
add.rownames = TRUE)
sc <- spectral_clust(D, d = 3, k = 4)
plot3d(sc$coord, col = sc$groups)
plot(G, vertex.color = sc$groups)
library(plotly)
test<-data.frame(sc$coord)
colnames(test)<-c("oned", "twod", "threed")
p <- plot_ly(test, x = ~oned, y = ~twod, z = ~threed, color = sc$groups) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
zaxis = list(title = 'z')))
p
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(plotly)
test<-data.frame(sc$coord)
colnames(test)<-c("oned", "twod", "threed")
p <- plot_ly(test, x = ~oned, y = ~twod, z = ~threed, color = sc$groups) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
zaxis = list(title = 'z')))
p
devtools::install_version(..., dep = FALSE)
update.packages(ask = FALSE, checkBuilt = TRUE)
test<-data.frame(sc$coord)
colnames(test)<-c("oned", "twod", "threed")
p <- plot_ly(test, x = ~oned, y = ~twod, z = ~threed, color = sc$groups) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
zaxis = list(title = 'z')))
p
?plot_ly
library(plotly)
test<-data.frame(sc$coord)
colnames(test)<-c("oned", "twod", "threed")
p <- plot_ly(test, x = ~oned, y = ~twod, z = ~threed, color = sc$groups) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
zaxis = list(title = 'z')))
p
install.packages("tidyverse")
library(tidyverse)
p
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
